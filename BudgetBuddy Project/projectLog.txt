I included this text document to keep track of my progess and log what I have completed week by week.

Week 1:
Log 3/26: 
    I have decided that the functionalities of this app will include:
        - tracking income
        - distributing income across categories such as "Essentials", "Savings", "Free Spending"
        - Allow users to log expenses under different categories
        - Display some sort of summary page that shows all the information, expenses, and balances
        - Save user data so they can come back and use this app again

    Created Java classes:
        - BudgetBuddy (main class that handles program flow)
        - User (stores the user's information such as name, income, balances)
        - Budget (manages income allocation)

    Started planning the user interface (creating the menu)



Week 2:
Log 4/02:
    Summary:
        - Started more work on week 2 stuff. 
        - I created a new Budget class that would store values for income, savings, essentials, and free spending.
        - Completed the Expense class (subject to change, however I feel it shall remain the same for the remainder of the project).

    Changes made:
        - made the if-statements into a switch for better clarity
        - put the scanner object outside of the main method so that I can use it in the other methods
        - created methods:
            > setIncome
            > allocateBudget
            > addExpense
            > viewSummary
    
    Goals:
        - Moving forward I will continue to work on the different classes, maybe start working on the arraylists that will go into 
        this project.
        - Hopefully I will complete the budget class and start thinking about the saving function of this project.

Log 4/04:
    Summary:
        - Continued working in the main class
        - Had to learn how to create files and write in those files. Took some time but I believe I got a good understanding of it. 
        - Started work on File creation and writing. Whenever the program runs for the first time, it will create a "userFile" text
        document to store the user's data. The program will ask for the user's name and other information for the budget app. 
        Everytime the program runs after the file is created and is not empty, it will skip to the menu and won't ask for the information.
        There are still some kinks that may need to be worked out however, the basis of what it should do is completed.

    Changes made:
        - imported java.io.File, java.io.FileWriter, java.IOException
        - sectioned file object and variables together at the beginning of the code for better clarity
        - created an if statement to check if it is the user's first time using the program (i.e. they don't have any saved data)
        - if statement has a try-catch statement for exception handling
    
    Goals:
        - I still need to work on the incomplete methods and some of the other classes, but I want to focus on the user file saving 
        and writing first because it will have an impact on aforementioned classes/methods.
        - Going to focus on File reading for next week. I may consider switching from a text document style of file to something else
        depending on what is easier to get information from the saved file and store in variables.
        - Project progress seems to be going well, hopefully that sentiment remains for the remainder of the project. 



Week 3:
Log 4/07:
    Summary:
        - Continued working with the file system in my program. I implemented the reading aspect of it and got it so that the program will 
        remember the users information (so far it's only the name).
        - Also started working on the setIncome method (since I now have a file to store user information, read user information, and update
        variables using the files), I hope to continue work on the actual methods.

    Changes made:
        - Implemented the file reading code. Lines 45-57
        - Added more functionality to the code. Lines 32-38
        - Made some changes to setIncome() method (it is still in progress). Lines 85-91

    Goals:
        - I hope to finish the rest of the methods for the main class by the end of this week
        - May consider looking into JSON instead of File storage, but more research must be done.
        - May add more flexibility within the code so that the User can create their own budget categories.
        - Also have been thinking about combining the User class and the Budget class for better clarity.

Log 4/09 and 4/11:
    Summary:
        - I spent the past couple days trying to restructure my program using JSON for my file saving, however, I was unsuccessful in the process.
        I couldn't import JSON and kept running into issues. I followed different youtube tutorials, reddits, some stack overflows, and even ChatGPT,
        yet still couldn't implement it the way I wanted to.
        - That being said, I was able to continue with my original file saving structure and learned how to parse through text files for user data.
        - With this method, every time the program was run after the first initial set-up, it would update the variables and the user's information
        would be saved. I also created a separate class for udpating the first method "setIncome".

    Changes made:
        - Created new java class "UserDataUpdater.java"
            - the method updateIncome would look through the text file for the string key "Monthly Income" and update the original value which was 0
            with whatever the user inputted. 
        - Removed Budget class because I plan to merge it with User class.

        - Sectioned my code in the main class for better visability.
        - Made some changes to the file reading portion. Lines 49-69.
        - On Line 41 of the main class I initialized the values for each part of the user data file (Everything starts with 0 now)
        - Completed setIncome method
        - Started work on allocateBudget method

    Goals:
        - I plan to complete the other methods next week, it took a little longer because I wanted to use JSON as a saving structure and trying to figure
        it out took a lot of my time.
        - Still need to consider flexibility within the code for users to create their own budget categories
        - Will consider making the interface more user friendly and forgiving (such as implementing a back button/option or something that allows the user to re-enter values
        if entered incorrectly)
        - I am a little behind now because of the JSON set back so I need to still finish Week 3 stuff for next week. I knew the file saving portion would be tricky, but
        it is a challenge I will enjoy completing.
        - I need to definitely complete bullet points 3, 5, and 6 of week 3:
            > ensures that the user enters valid numbers for income and expenses; prevent allocation percentages from exceeding 100%
            > allow users to add, modify, delete expenses
            > implementing a summary or a report to display user information
        - Some point after all of that I will look into GUI's hopefully.



Week 4:
Log 4/16:
    Summary:
        - Finished allocateBudget() method. Worked more on the file saving and file writing. Added more code for better user experience.
        Made some changes in UserDataUpdater.java
        - Pretty busy this week with other stuff so I coudln't prioritize BudgetBuddy, going forward I hope to have more time to make more progress.

    Changes made:
        - Lines 39-67 of UserDataUpdater. I added a new method for allocating budget.
        - Completed methods within the main class
        - Slight changes to improve usability.

    Goals:
        - Finish more methods
        - Enhance program more for user experience
        - Implement the summary
        - Error checking/handling

Log 4/28:
    Summary:
        - I wanted to make the program more practical, so I learned how to use DateTime formatter. The text files have been updated accordingly.
        - Created a new text file for expenses so that everything is more neat. I also used a formatter to make the expense file look for readable.
        Still needs more tweaks but a good start.
        - The Balance amount in the userData file has accomplished nothing thus far, so I wanted to incorporate a payday simulated method where the Balance
        would be a live amount that the user can check on everytime they used this program.
        - Done more work on BudgetBuddy main class.
            - Worked on addExpense() method
            - I added a checkPayDay() method

    Changes made:
        - Lines 164-176 in BudgetBuddy. (checks payday)
        - Lines 148-156 in BudgetBuddy. (adds the date for the expenses)
        - Lines 73-148 in UserDataUpdater. (3 new methods for payday and updating balance)

    Goals:
        - Finish addExpense() method
        - Enhance for more practical user experience
        - add viewSummary(); (probably will be in the form of a text file too.)
        - check all the code is working so far

Log 5/10:
    Summary:
        - Short update log. Completed addEXpense() method
        - The expense file formats all expenses with a description now too.

    Changes Made:
        - Lines 133-167 in BudgetBuddy.java

    Goals:
        - Going to work on viewSummary
        - Finishing touches
        - Check all code is working
        - Complete Project

Log 5/11:
    Summary:
        - Finished viewSummary() method
        - The program now creates a new text file to store the summary. This acts as a receipt of sorts for the user to keep for their records.
        - During this log I came across several bugs and went through the long troublesome process of debugging my program. I missed a couple Scanners and
        had to rebuild some of the pre-existing code.
        - More formatting was done to make the files more user-friendly and functional

    Changes made:
        - Lines 278-297 in BudgetBuddy.java. These are helper methods for viewSummary().

    Goals:
        - Finishing touches for tomorrow before turning the project in.

Log 5/12:
    Summary:
        - Some last few tweaks to make the program is fully functional at its early stages. I'm thinking of calling this v1.0 of BudgetBuddy.
        - Sadly, I don't think I will have enough time to make it into a GUI, however, if I revist this project in the future I will definitely add it in.
        - For this part, I wanted to mainly focus on exception handling to create a smooth user experience.
    
    Changes made:
        - Lines 93-100. I changed the standard scan choice to something that will prevent the program from crashing if the user inputs something other than a number
        - Lines 218-222 and 247-251. I checked if the income was 0 and if the expense log was empty before viewing the summary.
        - Lines 267-275. I created a file directory to save the receipts for the user. This will hold all their view summaries. The formatting was also fixed because 
        I enountered some bugs with it.
        - In the while loop on line 196. I added try-catch blocks to help with error detection. I was getting an error message everytime I launched the program 
        saying I Coudln't parse the file. Before it was because of the "$" and "%". This should fix it.

    Final Statements:
        - N/a

--------------------
--------------------
Log 09/14/25:
    Summary:
        - This log will cover the past week updates
        - Finalized CLI version of BudgetBuddy moved onto creating a GUI interface.
        - Went through countless errors and compilation issues, however, base program is functional and has the same functions as the CLI version.
        - Interface is still under development (no personlization to the application)
        - Good to be back :>
    
    Changes made:
        - Divided the main BudgetBuddy.java class into 3 parts (BudgetBuddy.java (then later replaced by the GUI version), StorageManager.java, and Transaction.java)
        Names are self-explanatory.
        - Changed File saving method into CSV format:
            - userData.txt and expenseFile.txt were replaced by categories.txt, income.txt, and transaction.txt.
        - Deleted UserDataUpdater.java (unecessary)
    
    Goals:
        - Hope to improve GUI interface for better readability, design, and user experience
        - Start thinking about how to make BudgetBuddy different than other budgeting apps
        - Delete BudgetBuddy.java at some point (CLI is no longer needed)
        - Start thinking about creating a web-based application instead of just running off my local computer